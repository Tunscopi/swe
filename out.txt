      Computers are widely used to help produce written documents.  One d      
      esirable capability of a word processing system is margin manipulat      
      ion.  This enables text to be formatted with a left and right margi      
      n selected by a user.  The word processing program allocates words       
      to lines in order to satisfy the margin requirements.  For this pro      
      ject you are to write a program which will process a text file and       
      produce as output a) a displayed listing of the edited text and als      
      o b) save the produced file on your directory (DAT1.  TXT).  The in      
      put data must contain (the text file) two integers (inches) specify      
      ing the left and right margins, respectively, to be used in generat      
      ing the output listing.  With these margins in mind, your program s      
      hould process the remaining text in the file.  The program should i      
      nclude as many words as can “fit” between the margins.  No word      
      s should extend beyond the right margin.  (Note: your program need       
      not “right justify” the text! It must simply observe the margin      
      s.  ) For this problem, a “word” is any sequence of consecutive      
       non-blank characters, and thus may include punctuation or special       
      characters.  There may be trailing blanks after words which your pr      
      ogram should ignore.  Your program should leave 1 blank between wor      
      ds, and 2 blanks between sentences in the output (listing and saved      
       file).  You need to be concerned with paragraphs and all lines, in      
      cluding the first, should begin at the left margin.  You may also a      
      ssume the maximum input line is 80 characters long.  You should cre      
      ate your own data file, as described, and name it DAT1.  TXT on you      
      r directory.  You should develop an algorithm.  The program should       
      be developed using C++.  Submit the following sections with your do      
      cument 1) Requirements / Assumptions used 2) Algorithm (pseudo code      
      ) 3) Source code 4) Test cases used with results You will have to d      
      emonstrate your project to the class.  